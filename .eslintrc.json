{
  "globals": {
    // Global 'variables' we define in webpack config.
    "__THEME_NAME__": "readonly",
    "__VERSION__": "readonly",
    "__ENV__": "readonly"
  },
  "env": {
    "browser": true,
    "es6": true
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 2018,
    "ecmaFeatures": {
      "jsx": true
    },
    "sourceType": "module"
  },
  "plugins": ["@typescript-eslint", "react-hooks"],
  "extends": [
    "next/core-web-vitals",
    "plugin:import/typescript",
    "plugin:jsx-a11y/recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier",
    "prettier/@typescript-eslint"
  ],
  "rules": {
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-use-before-define": [2, "nofunc"],
    "@typescript-eslint/no-non-null-assertion": "off",
    "@typescript-eslint/ban-ts-ignore": "off",
    "@typescript-eslint/no-unused-vars": "on",
    "import/prefer-default-export": "off",
    "import/extensions": "off",
    "lines-between-class-members": "off",

    // stylistic rules
    "arrow-parens": [0, "always"],
    "class-methods-use-this": 0,
    "comma-dangle": [2, "never"],
    "comma-style": [2, "last"],
    "consistent-return": 0,
    "func-names": [0, "never"],
    "indent": [
      2,
      4,
      {
        "SwitchCase": 1
      }
    ],
    "jsx-quotes": [2, "prefer-double"],
    // "max-lines-per-function": [1, 20], // Need discussion.
    "new-cap": 1,
    "no-console": [1, { "allow": ["warn", "error"] }],
    "no-continue": 0,
    "no-loop-func": 0,
    "no-param-reassign": 0,
    "no-new": 0,
    "no-mixed-spaces-and-tabs": 2,
    "no-plusplus": 0,
    "no-restricted-syntax": [
      "error",
      {
        "selector": "ForInStatement",
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.keys,values,entries, and iterate over the resulting array."
      },
      {
        "selector": "LabeledStatement",
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
      },
      {
        "selector": "WithStatement",
        "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
      }
    ],
    "no-undef-init": 2,
    "no-underscore-dangle": 0,
    "no-use-before-define": [2, "nofunc"],
    "one-var": 0,
    "quotes": [2, "double"],
    "strict": [2, "never"],
    "no-shadow": 0, // I don't agree with it. /Raf
    // "prefer-arrow-callback": 2,
    // "space-before-function-paren": 0,
    // "operator-linebreak": 0,
    // "implicit-arrow-linebreak": 0,
    // "function-paren-newline": 0,
    // "no-tabs": 0,
    "no-undef": 0, // I don't agree with it. /Raf
    // "no-unused-vars": 2,
    // "wrap-iife": 0,
    // "eol-last": 0,
    // "no-mixed-requires": 0,
    // "no-multi-assign": 0,
    // "max-len": 0,
    "no-unused-expressions": [
      "error",
      {
        "allowTernary": true
      }
    ]
  }
}
